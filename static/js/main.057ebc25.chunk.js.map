{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.component.jsx","components/search-box/search.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monsters","id","alt","name","email","CardList","map","items","Search","type","placeholder","onChange","handleChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","monster","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAEaA,EAAO,SAAAC,GAChB,OACI,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAG,+BAA0BF,EAAMG,SAASC,GAAzC,0BAAqEC,IAAI,UAC7E,6BAEIL,EAAMG,SAASG,OAIfN,EAAMG,SAASI,UCRlBC,EAAW,SAACR,GACzB,OACA,qBAAKC,UAAU,YAAf,SAEQD,EAAMG,SAASM,KAAI,SAAAC,GAAK,OACxB,cAAC,EAAD,CAAqBP,SAAUO,GAApBA,EAAMN,UCPZO,G,MAAS,SAAAX,GAClB,OAEI,uBAAOY,KAAK,SAASC,YAAY,uBACjCZ,UAAU,SACTa,SAAUd,EAAMe,iBCsCVC,E,kDAtCX,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IAcVe,aAAe,SAACE,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAdnC,EAAKC,MAAQ,CACXnB,SAAU,GAEVgB,YAAY,IALG,E,qDASrB,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACf,SAASwB,S,oBAQzC,WACE,MAAgCC,KAAKN,MAA9BnB,EAAP,EAAOA,SAAUgB,EAAjB,EAAiBA,YACXU,EAAmB1B,EAAS2B,QAAO,SAAAC,GAAO,OAC9CA,EAAQzB,KAAK0B,cAAcC,SAASd,EAAYa,kBAElD,OACE,sBAAK/B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACAc,aAAca,KAAKb,eAClB,cAAC,EAAD,CAAUZ,SAAU0B,W,GA/BXK,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.057ebc25.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\nexport const Card = props =>{\r\n    return(\r\n        <div className=\"card-container\">\r\n        <img src={`https://robohash.org/${props.monsters.id}?set=set2&size=180x180`} alt=\"elyas\" />\r\n            <h1>\r\n            {\r\n                props.monsters.name\r\n            }\r\n            </h1>\r\n            {\r\n                props.monsters.email\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './card-list.style.css';\r\nimport {Card} from '../card/card'\r\n\r\nexport const CardList = (props) => {\r\nreturn(\r\n<div className=\"card-list\">\r\n    {\r\n        props.monsters.map(items => \r\n        <Card key={items.id} monsters={items} />\r\n        )\r\n    }\r\n</div>\r\n)\r\n\r\n}","import React from 'react'\r\nimport './search.css'\r\nexport const Search = props => {\r\n    return (\r\n\r\n        <input type=\"search\" placeholder=\"search monsters ... \"\r\n        className=\"search\"\r\n         onChange={props.handleChange}\r\n        />\r\n\r\n    )\r\n}","import './App.css';\nimport React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { Search } from './components/search-box/search.component';\n\n\nclass App extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        monsters: [\n        ],\n        searchField:''\n      };\n    }\n    \n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters:users}))\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value})\n  }\n    \n  \n  render(){\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <Search \n        handleChange={this.handleChange}/>\n         <CardList monsters={filteredMonsters}>\n         </CardList>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}